initSidebarItems({"constant":[["S","Slice value for the full range of an axis."]],"enum":[["ErrorKind","Error code for an error related to array shape or layout.This enumeration is not exhaustive. The representation of the enum is not guaranteed."]],"fn":[["arr0","Create a zero-dimensional array with the element `x`."],["arr1","Create a one-dimensional array with elements from `xs`."],["arr2","Create a two-dimensional array with elements from `xs`."],["arr3","Create a three-dimensional array with elements from `xs`.**Panics** if the slices are not all of the same length."],["aview0","Create a zero-dimensional array view borrowing `x`."],["aview1","Create a one-dimensional array view with elements borrowing `xs`."],["aview2","Create a two-dimensional array view with elements borrowing `xs`."],["aview_mut1","Create a one-dimensional read-write array view with elements borrowing `xs`."],["rcarr1","Create a one-dimensional array with elements from `xs`."],["rcarr2","Create a two-dimensional array with elements from `xs`."],["rcarr3","Create a three-dimensional array with elements from `xs`."],["stack","Stack arrays along the given axis.***Errors*** if the arrays have mismatching shapes, apart from along `axis`. (may be made more flexible in the future).<br> ***Errors*** if `arrays` is empty, if `axis` is out of bounds, if the result is larger than is possible to represent."],["zeros","***Deprecated: Use `ArrayBase::zeros` instead.***Create an array filled with zeros"]],"macro":[["s!","Slice argument constructor.`s![]` takes a list of ranges, separated by comma, with optional strides that are separated from the range by a semicolon. It is converted into a slice argument with type `&[Si; N]`.Each range uses signed indices, where a negative value is counted from the end of the axis. Strides are also signed and may be negative, but must not be zero.For example `s![0..4;2, 1..5]` is a slice of rows 0..4 with step size 2, and columns 1..5 with default step size 1. The slice would have shape `[2, 4]`.If an array has two axes, the slice argument is passed as type `&[Si; 2]`.  The macro expansion of `s![a..b;c, d..e]` is equivalent to `&[Si(a, Some(b), c), Si(d, Some(e), 1)]`."],["stack!","Stack arrays along the given axis.Uses the `stack` function, calling `ArrayView::from(&a)` on each argument `a`.***Panics*** if the `stack` function would return an error."]],"struct":[["ArrayBase","An *N*-dimensional array.The array is a general container of elements. It cannot grow or shrink, but can be sliced into subsets of its data. The array supports arithmetic operations by applying them elementwise.The `ArrayBase<S, D>` is parameterized by `S` for the data container and `D` for the dimensionality.Type aliases `OwnedArray`, `RcArray`, `ArrayView`, and `ArrayViewMut` refer to `ArrayBase` with different types for the data container.ContentsOwnedArray and RcArray Indexing and Dimension Slicing Subviews Arithmetic Operations Broadcasting Methods Methods for Array Views `OwnedArray` and `RcArray``OwnedArray` owns the underlying array elements directly (just like a `Vec`), while `RcArray` is a an array with reference counted data. `RcArray` can act both as an owner or as a view in that regard. Sharing requires that it uses copy-on-write for mutable operations. Calling a method for mutating elements on `RcArray`, for example `view_mut()` or `get_mut()`, will break sharing and require a clone of the data (if it is not uniquely held).Note that all `ArrayBase` variants can change their view (slicing) of the data freely, even when their data can’t be mutated.Indexing and DimensionArray indexes are represented by the types `Ix` and `Ixs` (signed).The dimensionality of the array determines the number of *axes*, for example a 2D array has two axes. These are listed in “big endian” order, so that the greatest dimension is listed first, the lowest dimension with the most rapidly varying index is the last.In a 2D array the index of each element is `(row, column)` as seen in this 3 × 3 example:The number of axes for an array is fixed by the `D` parameter: `Ix` for a 1D array, `(Ix, Ix)` for a 2D array etc. The `D` type is also used for element indices in `.get()` and `array[index]`. The dimension type `Vec<Ix>` allows a dynamic number of axes.The default memory order of an array is *row major* order (a.k.a “c” order), where each row is contiguous in memory. A *column major* (a.k.a. “f” or fortran) memory order array has columns (or, in general, the outermost axis) with contiguous elements.The logical order of any array’s elements is the row major order. The iterators `.iter(), .iter_mut()` always adhere to this order, for example.SlicingYou can use slicing to create a view of a subset of the data in the array. Slicing methods include `.slice()`, `.islice()`, `.slice_mut()`.The slicing argument can be passed using the macro `s![]`, which will be used in all examples. (The explicit form is a reference to a fixed size array of `Si`; see its docs for more information.)SubviewsSubview methods allow you to restrict the array view while removing one axis from the array. Subview methods include `.subview()`, `.isubview()`, `.subview_mut()`.Subview takes two arguments: `axis` and `index`.`.isubview()` modifies the view in the same way as `subview()`, but since it is *in place*, it cannot remove the collapsed axis. It becomes an axis of length 1.`.outer_iter()` is an iterator of every subview along the zeroth (outer) axis, while `.axis_iter()` is an iterator of every subview along a specific axis.Arithmetic OperationsArrays support all arithmetic operations the same way: they apply elementwise.Since the trait implementations are hard to overview, here is a summary.Let `A` be an array or view of any kind. Let `B` be an array with owned storage (either `OwnedArray` or `RcArray`). Let `C` be an array with mutable data (either `OwnedArray`, `RcArray` or `ArrayViewMut`). The following combinations of operands are supported for an arbitrary binary operator denoted by `@`.`&A @ &A` which produces a new `OwnedArray` `B @ A` which consumes `B`, updates it with the result, and returns it `B @ &A` which consumes `B`, updates it with the result, and returns it `C @= &A` which performs an arithmetic operation in place (requires crate feature `\"assign_ops\"`) The trait `ScalarOperand` marks types that can be used in arithmetic with arrays directly. For a scalar `K` the following combinations of operands are supported (scalar can be on either the left or right side, but `ScalarOperand` docs has the detailed condtions).`&A @ K` or `K @ &A` which produces a new `OwnedArray` `B @ K` or `K @ B` which consumes `B`, updates it with the result and returns it `C @= K` which performs an arithmetic operation in place (requires crate feature `\"assign_ops\"`) BroadcastingArrays support limited *broadcasting*, where arithmetic operations with array operands of different sizes can be carried out by repeating the elements of the smaller dimension array. See `.broadcast()` for a more detailed description."],["Axis","An axis index.An axis one of an array’s “dimensions”; an *n*-dimensional array has *n* axes. Axis *0* is the array’s outermost axis and *n*-1 is the innermost.All array axis arguments use this type to make the code easier to write correctly and easier to understand."],["AxisChunksIter","An iterator that traverses over the specified axis and yields views of the specified size on this axis.For example, in a 2 × 8 × 3 array, if the axis of iteration is 1 and the chunk size is 2, the yielded elements are 2 × 2 × 3 views (and there are 4 in total).Iterator element type is `ArrayView<'a, A, D>`.See `.axis_chunks_iter()` for more information."],["AxisChunksIterMut","An iterator that traverses over the specified axis and yields mutable views of the specified size on this axis.For example, in a 2 × 8 × 3 array, if the axis of iteration is 1 and the chunk size is 2, the yielded elements are 2 × 2 × 3 views (and there are 4 in total).Iterator element type is `ArrayViewMut<'a, A, D>`.See `.axis_chunks_iter_mut()` for more information."],["AxisIter","An iterator that traverses over an axis and and yields each subview.The outermost dimension is `Axis(0)`, created with `.outer_iter()`, but you can traverse arbitrary dimension with `.axis_iter()`.For example, in a 3 × 5 × 5 array, with `axis` equal to `Axis(2)`, the iterator element is a 3 × 5 subview (and there are 5 in total).Iterator element type is `ArrayView<'a, A, D>`.See `.outer_iter()` or `.axis_iter()` for more information."],["AxisIterMut","An iterator that traverses over an axis and and yields each subview (mutable)The outermost dimension is `Axis(0)`, created with `.outer_iter()`, but you can traverse arbitrary dimension with `.axis_iter()`.For example, in a 3 × 5 × 5 array, with `axis` equal to `Axis(2)`, the iterator element is a 3 × 5 subview (and there are 5 in total).Iterator element type is `ArrayViewMut<'a, A, D>`.See `.outer_iter_mut()` or `.axis_iter_mut()` for more information."],["Elements","An iterator over the elements of an array.Iterator element type is `&'a A`.See `.iter()` for more information."],["ElementsMut","An iterator over the elements of an array (mutable).Iterator element type is `&'a mut A`.See `.iter_mut()` for more information."],["Indexed","An iterator over the indexes and elements of an array.See `.indexed_iter()` for more information."],["IndexedMut","An iterator over the indexes and elements of an array (mutable).See `.indexed_iter_mut()` for more information."],["Indexes","An iterator over the indexes of an array shape.Iterator element type is `D`."],["InnerIter","An iterator that traverses over all dimensions but the innermost, and yields each inner row.See `.inner_iter()` for more information."],["InnerIterMut","An iterator that traverses over all dimensions but the innermost, and yields each inner row (mutable).See `.inner_iter_mut()` for more information."],["ShapeError","An error related to array shape or layout."],["Si","A slice, a description of a range of an array axis.Fields are `begin`, `end` and `stride`, where negative `begin` or `end` indexes are counted from the back of the axis.If `end` is `None`, the slice extends to the end of the axis.See also the `s![] macro`, a convenient way to specify an array of `Si`.Examples`Si(0, None, 1)` is the full range of an axis. Python equivalent is `[:]`. Macro equivalent is `s![..]`.`Si(a, Some(b), 2)` is every second element from `a` until `b`. Python equivalent is `[a:b:2]`. Macro equivalent is `s![a..b;2]`.`Si(a, None, -1)` is every element, from `a` until the end, in reverse order. Python equivalent is `[a::-1]`. Macro equivalent is `s![a..;-1]`.The constant `S` is a shorthand for the full range of an axis."],["ViewRepr","Array view’s representation."]],"trait":[["AsArray","Argument conversion into an array viewThe trait is parameterized over `A`, the element type, and `D`, the dimensionality of the array. `D` defaults to one-dimensional.Use `.into()` to do the conversion."],["Data","Array representation trait.***Note:*** `Data` is not an extension interface at this point. Traits in Rust can serve many different roles. This trait is public because it is used as a bound on public methods."],["DataClone","Array representation trait.An array representation that can be cloned.***Internal trait, see `Data`.***"],["DataMut","Array representation trait.For an array with writable elements.***Internal trait, see `Data`.***"],["DataOwned","Array representation trait.A representation that is a unique or shared owner of its data.***Internal trait, see `Data`.***"],["DataShared","Array representation trait.A representation that is a lightweight view.***Internal trait, see `Data`.***"],["Dimension","Array shape and index trait.`unsafe` because of the assumptions in the default methods.***Don't implement or call methods in this trait, its interface is internal to the crate and will evolve at will.***"],["FixedInitializer","Fixed-size array used for array initialization"],["LinalgScalar","Elements that support linear algebra operations.`Any` for type-based specialization, `Copy` so that they don't need move semantics or destructors, and the rest are numerical traits."],["NdFloat","Floating-point element types `f32` and `f64`.Trait `NdFloat` is only implemented for `f32` and `f64` but encompasses as much float-relevant ndarray functionality as possible, including the traits needed for linear algebra (`Any`) and for *right hand side* scalar operations (`ScalarOperand`)."],["NdIndex","Tuple or fixed size arrays that can be used to index an array.**Note** the blanket implementation that's not visible in rustdoc: `impl<D> NdIndex for D where D: Dimension { ... }`"],["RemoveAxis","Array shape with a next smaller dimension.`RemoveAxis` defines a larger-than relation for array shapes: removing one axis from *Self* gives smaller dimension *Smaller*."],["ScalarOperand","Elements that can be used as direct operands in arithmetic with arrays.For example, `f64` is a `ScalarOperand` which means that for an array `a`, arithmetic like `a + 1.0`, and, `a * 2.`, and `a += 3.` are allowed.In the description below, let `A` be an array or array view, let `B` be an array with owned data, and let `C` be an array with mutable data.`ScalarOperand` determines for which scalars `K` operations `&A @ K`, and `B @ K`, and `C @= K` are defined, as ***right hand side operands***, for applicable arithmetic operators (denoted `@`).***Left hand side*** scalar operands are not related to this trait (they need one `impl` per concrete scalar type); but they are still implemented for the same types, allowing operations `K @ &A`, and `K @ B` for primitive numeric types `K`.This trait ***does not*** limit which elements can be stored in an array in general. Non-`ScalarOperand` types can still participate in arithmetic as array elements in in array-array operations."]],"type":[["Array","***Deprecated: Use `RcArray` instead***Array where the data is reference counted and copy on write, it can act as both an owner as the data as well as a lightweight view."],["ArrayView","A lightweight array view.An array view represents an array or a part of it, created from an iterator, subview or slice of an array.Array views have all the methods of an array (see `ArrayBase`).See also specific **Methods for Array Views**."],["ArrayViewMut","A lightweight read-write array view.An array view represents an array or a part of it, created from an iterator, subview or slice of an array.Array views have all the methods of an array (see `ArrayBase`).See also specific **Methods for Array Views**."],["Ix","Array index type"],["Ixs","Array index type (signed)"],["OuterIter","***Deprecated:*** Type renamed to `AxisIter`.Axis iterator for `Axis(0)`."],["OuterIterMut","***Deprecated:*** Type renamed to `AxisIterMut`.Axis iterator for `Axis(0)`."],["OwnedArray","Array where the data is owned uniquely."],["RcArray","Array where the data is reference counted and copy on write, it can act as both an owner as the data as well as a lightweight view."]]});